---
output: html_document
editor_options: 
  chunk_output_type: console
---

# Multivariable MR

```{r}
#| label: packages
#| code-fold: true
#| code-summary: Load R Packages
#| warning: false
#| error: false
#| message: false

library(tidyverse)    # Data wrangling 
library(cowplot)
library(TwoSampleMR)  # MR 
library(LDlinkR)      # LD and proxy snps
library(RadialMR)     # Radial MR sensetivity analysis 
library(phenoscanner) # Phenoscaner
library(MVMR)         # Multivarble MR
library(RMVMR)
library(gt)
```

## Perform MR analysis 
```{r}
#| label: functions
#| code-fold: true
#| code-summary: Import Data
#| warning: false
#| error: false
#| message: false

# Define column types for summary statistics
coltypes = cols(
  ID = col_character(),
  CHROM = col_double(),
  POS = col_double(),
  REF = col_character(),
  ALT = col_character(),
  AF = col_double(),
  TRAIT = col_character(),
  BETA = col_double(),
  SE = col_double(),
  Z = col_double(),
  P = col_double(),
  N = col_double(),
  OR = col_double(),
  OR_L95 = col_double(),
  OR_U95 = col_double(),
  DIR = col_character(),
  G1000_ID = col_character(),
  G1000_VARIANT = col_character(),
  DBSNP_ID = col_character(),
  DBSNP_VARIANT = col_character(),
  OLD_ID = col_character(),
  OLD_VARIANT = col_character()
)

## Function for extracting proxy snps using LDLink
munge_proxies <- function(LDLink_file, outcome, outcome_clump){
  LDLink_file_path <- LDLink_file
  proxy_snps <- read_tsv(LDLink_file_path, skip = 1, col_names = F) %>%
    rename(id = X1, func = X2, proxy_snp = X3, coord = X4, alleles = X5, maf = X6, 
           distance = X7, dprime = X8, rsq = X9, correlated_alleles = X10, FORGEdb = X11, RegulomeDB = X12) %>%
    separate(coord, c('chr', 'pos'), sep = ":") %>%
    mutate(snp = ifelse(id == 1, proxy_snp, NA), 
           chr = str_replace(chr, 'chr', ""), 
           chr = as.numeric(chr), 
           pos = as.numeric(pos)) %>%
    fill(snp, .direction = 'down') %>%
    relocate(snp, .before = proxy_snp) %>%
    dplyr::select(-id, -func, -FORGEdb, -RegulomeDB) %>%
    filter(rsq >= 0.8)

  # Munge proxy snp and outcome data
  proxy_outcome <- left_join(
      proxy_snps, outcome, by = c("proxy_snp" = "SNP")
    ) %>%
      separate(correlated_alleles, c("target_a1.outcome", "proxy_a1.outcome", 
                                     "target_a2.outcome", "proxy_a2.outcome"), sep = ",|=") %>%
      filter(!is.na(chr.outcome)) %>%
      arrange(snp, -rsq, abs(distance)) %>%
      group_by(snp) %>%
      slice(1) %>%
      ungroup() %>%
      mutate(
         proxy.outcome = TRUE,
         target_snp.outcome = snp,
         proxy_snp.outcome = proxy_snp, 
      ) %>% 
      mutate(
           new_effect_allele.outcome = case_when(
            proxy_a1.outcome == effect_allele.outcome & proxy_a2.outcome == other_allele.outcome ~ target_a1.outcome,
            proxy_a2.outcome == effect_allele.outcome & proxy_a1.outcome == other_allele.outcome ~ target_a2.outcome,
            TRUE ~ NA_character_
         ), 
          new_other_allele.outcome = case_when(
            proxy_a1.outcome == effect_allele.outcome & proxy_a2.outcome == other_allele.outcome ~ target_a2.outcome,
            proxy_a2.outcome == effect_allele.outcome & proxy_a1.outcome == other_allele.outcome ~ target_a1.outcome,
            TRUE ~ NA_character_
         ), 
         effect_allele.outcome = new_effect_allele.outcome, 
         other_allele.outcome = new_other_allele.outcome
      ) %>%
      dplyr::select(-proxy_snp, -chr, -pos, -alleles, -maf, -distance, -rsq, -dprime,  
             -new_effect_allele.outcome, -new_other_allele.outcome) %>%
      relocate(target_a1.outcome, proxy_a1.outcome, target_a2.outcome, proxy_a2.outcome, .after = proxy_snp.outcome) %>%
      rename(SNP = snp) %>%
      relocate(SNP, .after = samplesize.outcome)
  
  # Merge outcome and proxy outcomes
  outcome_dat <- bind_rows(
    outcome_clump, proxy_outcome
  ) %>% 
    arrange(chr.outcome, pos.outcome)
  
  outcome_dat
}

```


## Methods
### Tools & Publications 
R, [MVMR](https://github.com/WSpiller/MVMR), [RMVMR](https://github.com/WSpiller/RMVMR), [TwoSampleMR](https://github.com/MRCIEU/TwoSampleMR), [MendelianRandomization](https://cran.r-project.org/web/packages/MendelianRandomization/index.html)

- Hemani, G. et al. The MR-Base platform supports systematic causal inference across the human phenome. [Elife 7, e34408 (2018)]( https://doi.org/10.7554/eLife.34408)
- Yavorska, O. O. & Burgess, S. MendelianRandomization: an R package for performing Mendelian randomization analyses using summarized data. [Int J Epidemiol 46, dyx034 (2017)](https://doi.org/10.1093/ije/dyx034).
- Sanderson, E., Spiller, W. & Bowden, J. Testing and correcting for weak and pleiotropic instruments in two‐sample multivariable Mendelian randomization. [Stat Med 40, 5434–5452 (2021)](https://doi.org/10.1002/sim.9133).
- Woolf, B., Gill, D., Grant, A. J. & Burgess, S. MVMRmode: Introducing an R package for plurality valid estimators for multivariable Mendelian randomisation. [medRxiv (2023)](https://www.medrxiv.org/content/10.1101/2023.01.09.23284345v1).
   

**Multivariable MR:** Used to estimate the causal relationships between multiple exposures and a single outcome. It is particularly useful in situations where multiple exposures are related and have potential inter-related effects on the outcome of interest. MVMR can help to disentangle the complex relationships between these exposures and provide insights into their independent causal effects. Examples of situations where MVMR can be useful include the estimation of the independent effects of related risk factors such as lipid fractions on an outcome, or the assessment of the independent effects of a primary risk factor and a secondary mediator on a disease outcome. 

## Import datasets
```{r}
#| label: ldl
#| code-fold: true
#| code-summary: Import LDL SumStats
#| warning: false
#| error: false
#| message: false

exposure1_path = "resources/Willer2013ldl.chrall.CPRA_b37.tsv.gz"
exposure1_ss <- read_tsv(exposure1_path, comment = "##", col_types = coltypes, 
                       col_select = c(DBSNP_ID, CHROM, POS, REF, ALT, AF, BETA, SE, Z, P, N, TRAIT))

# Format data to TwoSampleMR format
exposure1 <- exposure1_ss %>%
  format_data(.,
    type = "exposure",
    snps = NULL,
    header = TRUE,
    phenotype_col = "TRAIT",
    snp_col = "DBSNP_ID",
    beta_col = "BETA",
    se_col = "SE",
    eaf_col = "AF",
    effect_allele_col = "ALT",
    other_allele_col = "REF",
    pval_col = "P",
    samplesize_col = "N",
    z_col = "Z",
    chr_col = "CHROM",
    pos_col = "POS",
    log_pval = FALSE
) %>%
  as_tibble()

```

```{r}
#| label: hdl
#| code-fold: true
#| code-summary: Import HDL SumStats
#| warning: false
#| error: false
#| message: false

exposure2_path = "resources/Willer2013hdl.chrall.CPRA_b37.tsv.gz"
exposure2_ss <- read_tsv(exposure2_path, comment = "##", col_types = coltypes, 
                       col_select = c(DBSNP_ID, CHROM, POS, REF, ALT, AF, BETA, SE, Z, P, N, TRAIT))

# Format data to TwoSampleMR format
exposure2 <- exposure2_ss %>%
  format_data(.,
    type = "exposure",
    snps = NULL,
    header = TRUE,
    phenotype_col = "TRAIT",
    snp_col = "DBSNP_ID",
    beta_col = "BETA",
    se_col = "SE",
    eaf_col = "AF",
    effect_allele_col = "ALT",
    other_allele_col = "REF",
    pval_col = "P",
    samplesize_col = "N",
    z_col = "Z",
    chr_col = "CHROM",
    pos_col = "POS",
    log_pval = FALSE
) %>%
  as_tibble()
```

```{r outcome}
#| label: AD
#| code-fold: true
#| code-summary: Import AD SumStats
#| warning: false
#| error: false
#| message: false

outcome_path = "resources/Kunkle2019load_stage123.chrall.CPRA_b37.tsv.gz"
outcome_ss <- read_tsv(outcome_path, comment = "##",  col_types = coltypes, 
                       col_select = c(DBSNP_ID, CHROM, POS, REF, ALT, AF, BETA, SE, Z, P, N, TRAIT))

# Format outcome
outcome <- outcome_ss %>%
  format_data(.,
    type = "outcome",
    snps = NULL,
    header = TRUE,
    phenotype_col = "TRAIT",
    snp_col = "DBSNP_ID",
    beta_col = "BETA",
    se_col = "SE",
    eaf_col = "AF",
    effect_allele_col = "ALT",
    other_allele_col = "REF",
    pval_col = "P",
    samplesize_col = "N",
    z_col = "Z",
    chr_col = "CHROM",
    pos_col = "POS",
    log_pval = FALSE
) %>%
  as_tibble()

```

## Harmonizing SumStats for MVMR
MVMR involves the simultaneous use of multiple exposures as instrumental variables in the analysis of a single outcome. As such, harmonizing the exposure and outcome datasets for MVMR is a more complex process than in univariable MR as it requires conducting multiple clumping and proxy-variant procedures. The following is a step-by-step guide to harmonizing the exposure and outcome datasets for MVMR using LDL and HDL cholesterol levels as the exposures, and AD as the outcome:

### Exposures
```{r}
#| label: clump
#| code-fold: true
#| code-summary: Clump Exposure datasets
#| warning: false
#| error: false
#| message: false

# Clump ldl
exposure1_clump <- exposure1 %>% 
  filter(pval.exposure < 0.01) %>%
  clump_data(.,
  clump_kb = 10000,
  clump_r2 = 0.001,
  clump_p1 = 1,
  clump_p2 = 1,
  pop = "EUR"
)

exposure1_dat <- filter(exposure1_clump, pval.exposure < 5e-8)

# Clump HDL
exposure2_clump <- exposure2 %>% 
  filter(pval.exposure < 0.01) %>%
  clump_data(.,
  clump_kb = 10000,
  clump_r2 = 0.001,
  clump_p1 = 1,
  clump_p2 = 1,
  pop = "EUR"
)

exposure2_dat <- filter(exposure2_clump, pval.exposure < 5e-8)
```

*Perform clumping to obtain independent genome-wide significant variants for each exposure.* This step involves identifying the SNPs that are independently associated with each exposure and are significant at the genome-wide level.

There are `r nrow(exposure1_dat)` and `r nrow(exposure2_dat)` independent genome-wide significant SNPS for LDL and HDL respectivly.

```{r}
#| label: combine_exposures
#| code-fold: true
#| code-summary: Combine Exposures
#| warning: false
#| error: false
#| message: false

## Make list of distinct SNPs from the exposures independent GWS snps 
mvmr_snps <- bind_rows(
  select(exposure1_dat, SNP), 
  select(exposure2_dat, SNP), 
) %>%
  distinct(SNP) %>%
  pull(SNP)

## extract combined SNP list from exposure datasets 
comb_exp <- bind_rows(
  exposure1 %>% filter(SNP %in% mvmr_snps),
  exposure2 %>% filter(SNP %in% mvmr_snps),
)
```

*Combine the exposure SNP lists and extract all the SNPs from each exposure.* This step combines the lists of SNPs for each exposure and extracts all the SNPs that are present in each exposure.

```{r}
#| label: exposure_snps
#| code-fold: true
#| code-summary: Combine Exposures
#| warning: false
#| error: false
#| message: false

## Unique SNP ids across exposures
exp_snp_list <- full_join(
  select(exposure1_dat, SNP, exposure), 
  select(exposure2_dat, SNP, exposure), 
  by = 'SNP'
)

exp1_unq_snps <- filter(exp_snp_list, !is.na(exposure.x) & is.na(exposure.y)) %>% nrow()
exp2_unq_snps <- filter(exp_snp_list, !is.na(exposure.y) & is.na(exposure.x)) %>% nrow()
both_unq_snp <- filter(exp_snp_list, !is.na(exposure.y) & !is.na(exposure.x)) %>% nrow()

```

There are `r length(mvmr_snps)` unique SNPs across the LDL and HDL SNP list - `r exp1_unq_snps` unique to LDL, `r exp2_unq_snps` to HDL, and `r both_unq_snps` that are shared.

Extracting these 164 SNPs from the LDL and HDL SumStats we get the following count of genome-wide significant SNPs across both traits.

```{r}
#| label: comb_exposure_snps
#| code-fold: true
#| code-summary: Combined Exposure SNPs
#| warning: false
#| error: false
#| message: false

## exposure and outcome snps lists 
comb_exp_out <- bind_rows(
  exposure1 %>% filter(SNP %in% mvmr_snps) %>% 
    rename(pval = pval.exposure, trait = exposure, chr = chr.exposure, pos = pos.exposure), 
  exposure2 %>% filter(SNP %in% mvmr_snps) %>% 
    rename(pval = pval.exposure, trait = exposure, chr = chr.exposure, pos = pos.exposure), 
  outcome %>% filter(SNP %in% mvmr_snps) %>% 
    rename(pval = pval.outcome, trait = outcome, chr = chr.outcome, pos = pos.outcome)
)

## How many SNPs are GWS across the exposures 
comb_exp_wide <- comb_exp_out %>%
   arrange(chr, pos) %>%
   select(SNP, trait, pval) %>%
   pivot_wider(names_from = trait, values_from = pval) %>%
   mutate(pval.exposure = pmin(LDL, HDL, na.rm = T))

comb_exp_wide %>% count(LDL < 5e-8, HDL < 5e-8)  %>%
  gt() 

```

*Identify proxy variants for any SNPs that are missing in each exposure.* This step involves identifying proxy variants for any SNPs that are not present in each exposure dataset. This is necessary to ensure that the exposure datasets are complete and that all relevant SNPs are included in the analysis.

::: {.callout-note}
There are no missing variants between the LDL &HDL SumStats, as such there is no need identify proxy variants
:::

*Perform LD clumping on the combined SNP list to retain indepdent SNPs.* This step is performed to reduce the risk of spurious results arising due to multi-collinearity by including correlated SNPs. LD clumping identifies lead SNPs in each locus and discards the remaining SNPs that are in linkage disequilibrium with them.

```{r}
#| label: clump_exposures
#| code-fold: true
#| code-summary: Clump Combined Exposures
#| warning: false
#| error: false
#| message: false

## Do another round of LD clumping 
clump_comb_exp<- comb_exp_wide %>% 
  clump_data(.,
  clump_kb = 10000,
  clump_r2 = 0.001,
  clump_p1 = 1,
  clump_p2 = 1,
  pop = "EUR"
)

comb_exp_independent <- comb_exp %>% filter(SNP %in% clump_comb_exp$SNP) 

```

Due to the high correlation among genetic variants, the GWAS of HDL and LDL may identify loci in the same genomic region. After LD clumping on the smallest p-value from the exposures, we retained `r nrow(comb_exp_clump)` of the initial `r length(mvmr_snps)` SNPs, ensuring that we included only independent variants in the analysis.


```{r}
#| label: tab_clump
#| code-fold: true
#| code-summary: table clump
#| warning: false
#| error: false
#| message: false
#| echo: false

comb_exp_independent %>%
   arrange(chr.exposure, pos.exposure) %>%
   select(SNP, exposure, pval.exposure) %>%
   pivot_wider(names_from = exposure, values_from = pval.exposure) %>%
   mutate(pval.exposure = pmin(LDL, HDL, na.rm = T)) %>%
  count(LDL < 5e-8, HDL < 5e-8)  %>%
  gt() 

```


### Extract Outcomes
*Extract exposures SNPs from the outcome GWAS.* This step involves extracting the SNPs that are associated with the exposures from the genome-wide association study of the outcome.

```{r}
#| label: clump_exposures
#| code-fold: true
#| code-summary: Clump Combined Exposures
#| warning: false
#| error: false
#| message: false

# extract exposure SNPs present in outcome
outcome_clump <- semi_join(
  outcome, comb_exp_independent, by = "SNP"
)

# Exposure SNPs not present in outomce
outcome_wo_snps <- anti_join(
  comb_exp_independent, outcome, by = "SNP"
) %>%
  distinct(SNP)

```

Of the `r nrow(comb_exp_independent)` exposures SNPs, `r nrow(outcome_clump)` are available in the AD SumStats - with 1 variant missing.

::: {.callout-note}
One issue to be aware of is that 3 of the exposure SNPs are GWS for AD and are violating the [exclusion restriction assumption](https://mr-dictionary.mrcieu.ac.uk/term/exclusion-restriction/).
:::

```{r}
#| label: tab_clump
#| code-fold: true
#| code-summary: table clump
#| warning: false
#| error: false
#| message: false
#| echo: false

comb_exp_independent %>%
  rename(pval = pval.exposure, trait = exposure, chr = chr.exposure, pos = pos.exposure) %>%
  bind_rows(
        outcome %>% filter(SNP %in% comb_exp_independent$SNP) %>% 
          rename(pval = pval.outcome, trait = outcome, chr = chr.outcome, pos = pos.outcome)
  ) %>%
  arrange(chr, pos) %>%
  select(SNP, trait, pval) %>%
  pivot_wider(names_from = trait, values_from = pval) %>%
  count(LDL < 5e-8, HDL < 5e-8, AD < 5e-8)  %>%
  gt() 

```

*Identify proxy variants for any SNPs that missing in the outcome.* This step involves identifying proxy variants for any SNPs that are not present in the outcome dataset. This is necessary to ensure that the outcome dataset is complete and that all relevant SNPs are included in the analysis.

```{r}
#| label: outcome_proxies
#| code-fold: true
#| code-summary: Extract proxy SNPs for outcome
#| warning: false
#| error: false
#| message: false

# Use LDLinkR to identify proxy snps
LDproxy_batch(outcome_wo_snps, 
        pop = "CEU", 
        r2d = "r2", 
        token = 'a6deee62cc4a', 
        append = TRUE,
        genome_build = "grch37")
system("mv combined_query_snp_list_grch37.txt data/mvmr_proxy_snps.txt")

# Munge proxy snp file
outcome_dat <- munge_proxies("data/mvmr_proxy_snps.txt", outcome, outcome_clump)

```

### Harmonize
*Harmonize exposure and outcome datasets.* In order to perform MR the effect of a SNP on an outcome and exposure must be harmonised to be relative to the same allele.

```{r}
#| label: harmonize
#| code-fold: true
#| code-summary: Harmonize exposure and outcome datasets
#| warning: false
#| error: false
#| message: false

# Univariate MR 
mrdat <- harmonise_data(comb_exp, outcome_dat) %>%
  as_tibble() %>%
  filter(pval.exposure < 5e-8)

## MVMR
mvdat <- mv_harmonise_data(comb_exp, outcome_dat)
```

```{r }
#| label: export_harmonized_dat
#| code-fold: true
#| code-summary: Export MVMR datasets 
#| warning: false
#| error: false
#| message: false

write_csv(mrdat, 'data/harmonized_mvmr_uni.csv')
write_rds(mvdat, 'data/harmonized_mvmr.rds')

```

## MVMR Analysis

### TwoSampleMR
Using the core univariable MR methods, we observed that higher genetically predicted LDL and HDL are associated with increased and reduced risk of AD respectively. However, as with total cholesterol levels we observe significant heterogeneity suggesting that the IVW estimates are likely to be biased.


```{r}
#| label: TwoSampleMR_MR
#| code-fold: true
#| code-summary: Univariable MR
#| warning: false
#| error: false
#| message: false

## Univariate MR
mr_res <- mr(mrdat, method_list = c("mr_ivw_fe", "mr_egger_regression", "mr_weighted_median", "mr_weighted_mode"))

# Heterogeneity statistics 
het_res <- mr_heterogeneity(mrdat, method_list = c("mr_egger_regression", "mr_ivw"))

# Horizontal pleitropy
plei_res <- mr_pleiotropy_test(mrdat)

# Leave-one-out analysis 
res_loo <- mr_leaveoneout(mrdat, method = mr_ivw_fe) %>% as_tibble()

# Single SNP anlaysis 
res_single <- mr_singlesnp(mrdat, all_method = c("mr_ivw_fe", "mr_egger_regression", "mr_weighted_median", "mr_weighted_mode")) %>% as_tibble()

# Radial MR 
radial_dat <- mrdat %>% filter(mr_keep == T) %>% dat_to_RadialMR()
radial_res <- map(radial_dat, function(x){
    ivw_radial(x, alpha = 0.05/nrow(x))
  }
)


```

```{r}
#| label: tables_MR
#| code-fold: true
#| code-summary: Tables for MR results
#| warning: false
#| error: false
#| message: false

## Res 
mr_res %>%
  select(-id.exposure, -id.outcome) %>%
  gt() %>%
  fmt_number(
    columns = c("b", "se")
  ) %>%
  fmt_number(
    columns = pval,
    rows = pval > 0.001,
    decimals = 3
  ) %>% 
  fmt_scientific(
    columns = pval,
    rows = pval <= 0.001,
    decimals = 1
  ) 

### Heterogenity
het_res %>%
  select(-id.exposure, -id.outcome) %>%
  gt() %>%
  fmt_number(
    columns = Q
  ) %>%
  fmt_number(
    columns = Q_pval,
    rows = Q_pval > 0.001,
    decimals = 3
  ) %>% 
  fmt_scientific(
    columns = Q_pval,
    rows = Q_pval <= 0.001,
    decimals = 1
  ) 

### Pleiotropy
plei_res %>%
  select(-id.exposure, -id.outcome) %>%
  gt() %>%
  fmt_number(
    columns = c('egger_intercept', 'se')
  ) %>%
  fmt_number(
    columns = pval,
    rows = pval > 0.001,
    decimals = 3
  ) %>% 
  fmt_scientific(
    columns = pval,
    rows = pval <= 0.001,
    decimals = 1
  ) 

```


```{r }
#| label: plots_MR
#| code-fold: true
#| code-summary: Plots for MR results
#| warning: false
#| error: false
#| message: false

scatter_p <- mr_scatter_plot(mr_res, mrdat)

funnel_p <- mr_funnel_plot(res_single)

radial_p <-  map(radial_res, function(x){
     plot_radial(x, radial_scale = F, show_outliers = F)
  }
)

joint_mr_p <- cowplot::plot_grid(
  scatter_p[[1]] + labs(title = "HDL") + theme_bw() + theme(legend.position = 'none', text = element_text(size = 8)),
  funnel_p[[1]] + labs(title = "HDL") + theme_bw() + theme(legend.position = 'none', text = element_text(size = 8)), 
  radial_p[[1]] + labs(title = "HDL") + coord_fixed(ratio=0.25) + theme(legend.position = 'none', text = element_text(size = 6)), 
  scatter_p[[2]] + labs(title = "LDL") + theme_bw() + theme(legend.position = 'none', text = element_text(size = 8)), 
  funnel_p[[2]] + labs(title = "LDL") + theme_bw() + theme(legend.position = 'none', text = element_text(size = 8)),
  radial_p[[2]] + labs(title = "LDL") + coord_fixed(ratio=0.25) + theme(legend.position = 'none', text = element_text(size = 6))
  )


legend_scatter <- cowplot::get_legend(
  # create some space to the left of the legend
  scatter_p[[1]] + theme(legend.box.margin = margin(12, 12, 12, 12))
)

# add the legend to the row we made earlier. Give it one-third of 
# the width of one plot (via rel_widths).
scatter_out.p <- cowplot::plot_grid(joint_mr_p, legend_scatter, rel_heights = c(4, 1), nrow = 2)

```

Extending these analyses into a multivariable framework we are able to determine the independent effects of LDL and HDL cholesterol levels on AD. We observed that higher geneticly predicted LDL remains significantly causaly associated with increased AD risk, while the causaly effect of HDL on AD is now non-significant.

```{r}
#| label: MVMR
#| code-fold: true
#| code-summary: MVMR analysis
#| warning: false
#| error: false
#| message: false

mvmr_res <- mv_multiple(mvdat, plots = F)
mvmr_res$result

```


```{r}
#| label: MVMR_tables
#| code-fold: true
#| code-summary: Tables for MVMR results
#| warning: false
#| error: false
#| message: false

### Pleiotropy
mvmr_res$result %>%
  select(-id.exposure, -id.outcome) %>%
  gt() %>%
  fmt_number(
    columns = c("b", "se")
  ) %>%
  fmt_number(
    columns = pval,
    rows = pval > 0.001,
    decimals = 3
  ) %>% 
  fmt_scientific(
    columns = pval,
    rows = pval <= 0.001,
    decimals = 1
  ) 

```

### MVMR package
The MVMR R package can be used to perform multivariable Mendelian randomization analyses, which includes heterogeneity statistics to assess the strength and validity of the instruments. Additionally, it can evaluate conditional instrument strength and pleiotropic bias.

```{r}
#| label: MVMR_format
#| code-fold: true
#| code-summary: Format for MVMR
#| warning: false
#| error: false
#| message: false

mvmr_dat <- cbind(mvdat$exposure_beta, 
        mvdat$exposure_se, 
        mvdat$outcome_beta, 
        mvdat$outcome_se
      ) %>%
      as.data.frame() %>%
      rownames_to_column() %>%
      as.matrix()

F.data <- format_mvmr(BXGs = mvmr_dat[,c(2,3)],
                    BYG = mvmr_dat[,6],
                    seBXGs = mvmr_dat[,c(4,5)],
                    seBYG = mvmr_dat[,7],
                    RSID = mvmr_dat[,1])

sres <- strength_mvmr(r_input = F.data, gencov = 0)
pres <- pleiotropy_mvmr(r_input = F.data, gencov = 0)
```

```{r}
#| label: MVMR_res
#| code-fold: true
#| code-summary: Results for MVMR
#| warning: false
#| error: false
#| message: false

res_mvmr <- ivw_mvmr(r_input = F.data)

mvmr_out <- res_mvmr %>% 
    as.data.frame() %>%
    rownames_to_column() %>%
    as_tibble() %>% 
    janitor::clean_names() %>%
    rename(exposure = rowname, b = estimate, se = std_error, p = pr_t) %>%
    mutate(
      exposure = ifelse(exposure == 'exposure1', 'HDL', 'LDL'), 
      outcome = 'AD',
      method = 'IVW-MVMR'
    ) %>%
    relocate(outcome, method, .after = exposure)

```


## RMVMR
```{r}

F.data_rmvmr <- format_rmvmr(BXGs = mvmr_dat[,c(2,3)],
                    BYG = mvmr_dat[,6],
                    seBXGs = mvmr_dat[,c(4,5)],
                    seBYG = mvmr_dat[,7],
                    RSID = mvmr_dat[,1])


res_rmvrm <- ivw_rmvmr(F.data_rmvmr)
sres_rmvrm <- strength_rmvmr(F.data_rmvmr, gencov = 0)
rmvrm_p <- plot_rmvmr(F.data_rmvmr, res_rmvrm)

```

### MendelianRandomization & MVMRmode Package
```{r MendelianRandomization}

MRMVInputObject <- MendelianRandomization::mr_mvinput(
  bx = mvdat$exposure_beta, 
  bxse = mvdat$exposure_se,
  by = mvdat$outcome_beta,
  byse = mvdat$outcome_se,
  snps = rownames(mvdat$exposure_beta), 
  exposure = c('HDL', 'LDL'), 
  outcome = 'AD'
  )

MRMV_ivw <- MendelianRandomization::mr_mvivw(MRMVInputObject, 
                       model="default", 
                       correl=FALSE, 
                       distribution="normal",
                       alpha = 0.05)

MRMV_ivw_df <- cbind(MRMV_ivw@Exposure, MRMV_ivw@Outcome, MRMV_ivw@Estimate, MRMV_ivw@StdError, MRMV_ivw@Pvalue) %>%
  as_tibble() %>%
  magrittr::set_colnames(c("Exposure", "Outcome", "b", "se", "p")) %>%
  mutate(method = "MRMV-IVW")

MRMV_egger <- MendelianRandomization::mr_mvegger(MRMVInputObject, orientate = 1, correl = FALSE, distribution = "normal", alpha = 0.05)

MRMV_egger_df <- cbind(MRMV_egger@Exposure, MRMV_egger@Outcome, MRMV_egger@Estimate, MRMV_egger@StdError.Est, MRMV_egger@Pvalue.Est) %>%
  as_tibble() %>%
  magrittr::set_colnames(c("Exposure", "Outcome", "b", "se", "p")) %>%
  mutate(method = "MRMV-Egger")


MRMV_wme <- MendelianRandomization::mr_mvmedian( MRMVInputObject, distribution = "normal", alpha = 0.05, iterations = 10000, seed = 314159265 )

MRMV_wme_df <- cbind(MRMV_wme@Exposure, MRMV_wme@Outcome, MRMV_wme@Estimate, MRMV_wme@StdError, MRMV_wme@Pvalue) %>%
  as_tibble() %>%
  magrittr::set_colnames(c("Exposure", "Outcome", "b", "se", "p")) %>%
  mutate(method = "MRMV-WME")


MRMV_wbe_res <- MVMRmode::mv_mrmode(Bout = mvdat$outcome_beta, 
                    Bexp = mvdat$exposure_beta, 
                    SEout = mvdat$outcome_se, 
                    SEexp = mvdat$exposure_se, 
                    Psi=0, CIMin = NA, CIMax = NA, CIStep = 0.001, alpha = 0.05, 
                    residual="IVW",Mode="CM",weighting = "weighted", stderror = "simple", 
                    phi = 1,distribution = "normal",iterations = 10000)

MRMV_wbe_df <- as_tibble(MRMV_wbe_res) %>%
  rename(b = Estimate, p = Pvalue) %>%
  mutate(Exposure = c("LDL", "HDL"), 
         Outcome = "AD", 
         method = 'MRMV_WBE') %>%
  mutate_if(is.double, as.character)


```

```{r MRMV_out}


MRMV_out <- bind_rows(
    MRMV_ivw_df, MRMV_egger_df, MRMV_wme_df, MRMV_wbe_df
  ) %>%
  relocate(method, .after = Outcome) %>%
  select(Exposure, Outcome, method, b, se, p) %>%
  mutate_at(vars(b, se, p), as.double)

write_csv(MRMV_out, 'results/mvmr_sensetivity_results.csv')

MRMV_out %>%
  pivot_wider(names_from = Exposure, values_from = c('b', 'se', 'p')) %>%
  relocate(se_HDL, p_HDL, .after = b_HDL) %>%
  gt() %>%
  fmt_number(
    columns = c("b_HDL", "se_HDL", "b_LDL", "se_LDL")
  ) %>% 
  fmt_number(
    columns = c("p_LDL"),
    rows =  p_LDL > 0.001,
    decimals = 3
  ) %>% 
  fmt_scientific(
    columns = c("p_LDL"),
    rows = p_LDL <= 0.001,
    decimals = 1
  ) %>%
  fmt_number(
    columns = c("p_HDL"),
    rows = p_HDL > 0.001 ,
    decimals = 3
  ) %>% 
  fmt_scientific(
    columns = c("p_HDL"),
    rows = p_HDL <= 0.001,
    decimals = 1
  ) %>%
  tab_spanner(
    label = "HDL",
    columns = c("b_HDL", "se_HDL", "p_HDL")
  ) %>%
  tab_spanner(
    label = "LDL",
    columns = c("b_LDL", "se_LDL", "p_LDL")
  ) %>%
  cols_label(
    b_LDL = 'b',
    se_LDL = 'se',
    p_LDL = 'p',
    b_HDL = 'b',
    se_HDL = 'se',
    p_HDL = 'p',
  ) %>%
  gtsave(., 'results/tables/mvmr_res.png')

```















































